buildscript {
    repositories {
        jcenter()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
    }
}

plugins {
    id 'java-library'
    id 'eclipse'
    id 'maven'
}

sourceSets {
		main {
			java {
				srcDir 'src/main/java'
			}
			resources {
				srcDir 'conf'
				srcDir 'resources'
			}
		}
		test {
			java {
				srcDir 'src/test/java'
			}
		}
}


group = 'com.github.helegraf'
description = ''
// version = 

uploadArchives {
    repositories {
     	mavenDeployer{
            mavenLocal()
        }
    }
}


jar {
    manifest {
        attributes 'Main-Class': 'experiments.EmpiricalRankerExperimenter'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
		mavenCentral()
		mavenLocal()
		maven { url "https://jitpack.io" }
		maven { url "http://clojars.org/repo/" }
		maven { url "https://plugins.gradle.org/m2/" }
		maven { url "https://nexus.cs.upb.de/repository/maven-releases/" }
		flatDir {
			dirs 'lib'
		}
}

//configurations {
 //     all*.exclude group: 'log4j', module: 'log4j'
//}


dependencies {
	// OpenmlWebapplication for computing meta-features
	implementation files ('libs/OpenmlWebapplication.jar')
	
	// Autoweka
	//implementation files ('libs/autoweka.jar')
	
	// jPL
	//implementation files ('libs/jpl-api-0.0.9-jar-with-dependencies.jar')

	// JAICore
    //implementation 'com.github.fmohr:JAICore:a5aabbfefb0fdd210bc24ca9e17c503e4b10f96d'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    // https://mvnrepository.com/artifact/nz.ac.waikato.cms.weka/weka-stable 
	//api group: 'nz.ac.waikato.cms.weka', name: 'weka-stable', version: '3.8.1'
    
	// https://mvnrepository.com/artifact/org.openml/apiconnector
	//compile group: 'org.openml', name: 'apiconnector', version: '1.0.22'

    
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    
	// https://mvnrepository.com/artifact/mysql/mysql-connector-java
	compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.45'

 	implementation 'com.github.helegraf:data-handling:e4d6a1bbbb'
 	
 	compile 'ai.libs:mlplan'

}



apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'

allprojects {
    eclipse.project {
        natures 'org.eclipse.buildship.core.gradleprojectnature'
    }

}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// To specify a license in the pom:
install {
  repositories.mavenInstaller {
    pom.project {
      licenses {
        license {
          name 'GNU General Public License v3.0'
          url 'http://www.gnu.org/licenses/gpl-3.0'
          distribution 'repo'
        }
      }
    }
  }
}

shadowJar {
  zip64 true
      mergeServiceFiles()
    exclude "META-INF/*.SF"
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude "LICENSE*"
}

task modeljar(type: Jar) {
	zip64 = true
    manifest {
        attributes 'Main-Class': 'experiments.RankerModelTrainingExperimenter'
    }
    destinationDir = file("${projectDir}")
    baseName = 'ranker_models'
    exclude ('META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA')
    from sourceSets.main.allSource
    from { (configurations.compile)
            .collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task mlplanregjar(type: Jar) {
	zip64 = true
    manifest {
        attributes 'Main-Class': 'experiments.MLPlanRankerExperimenter'
    }
    destinationDir = file("${projectDir}")
    baseName = 'mlplanreg'
    exclude ('META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA')
    from sourceSets.main.allSource
    from { (configurations.compile)
            .collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}